# TODO здесь писать код
import functools
import time

def delay(seconds):
    """
    Декоратор, который добавляет задержку перед выполнением декорируемой функции.

    Аргументы:
    - seconds: количество секунд задержки
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            """Осмысленное сообщение о начале ожидания"""
            print(f"Ожидание началось. Задержка в {seconds} секунд...")
            time.sleep(seconds)  # Приостанавливаем выполнение функции на указанное количество секунд
            result = func(*args, **kwargs)  # Выполняем декорируемую функцию
            """Осмысленное сообщение о завершении ожидания"""
            print("Ожидание завершено.")
            return result
        return wrapper
    return decorator

"""Пример использования декоратора"""
@delay(seconds=3)
def check_changes(page):
    """
    Функция, которая проверяет, изменились ли данные на веб-странице или её код.
    Возвращает True, если данные изменились, и False в противном случае.

    Аргументы:
    - page: веб-страница или её код
    """
    # Осмысленное сообщение о начале проверки изменений
    print("Проверка изменений началась.")
    # Здесь должна быть логика проверки изменений на веб-странице или её кода
    # ...
    # Осмысленное сообщение о завершении проверки изменений
    print("Проверка изменений завершена.")
    return False

"""Пример вызова декорированной функции"""
result = check_changes("example.com")
print(result)